hydra:
  run:
    dir: ckpts/${model.name}_${model.mel_spec.mel_spec_type}_${model.tokenizer}_${datasets.name}/${now:%Y-%m-%d}/${now:%H-%M-%S}
    
datasets:
  name: ParCzech_2020_2021
  batch_size_per_gpu: 7500  # 2 GPUs, 2 * 7500 = 15000
  batch_size_type: frame  # "frame" or "sample"
  max_samples: 32  # max sequences per batch if use frame-wise batch_size. we set 32 for small models, 64 for base models
  num_workers: 8

optim:
  epochs: 1000
  learning_rate: 7.5e-5
  num_warmup_updates: 5000  # warmup updates
  grad_accumulation_steps: 8  # note: updates = steps / grad_accumulation_steps
  max_grad_norm: 1.0  # gradient clipping
  bnb_optimizer: False  # use bnb 8bit AdamW optimizer or not

model:
  name: F5TTS_Small
  tokenizer: char
  tokenizer_path: None  # if tokenizer = 'custom', define the path to the tokenizer you want to use (should be vocab.txt)
  arch:
    dim: 768
    depth: 18
    heads: 12
    ff_mult: 2
    text_dim: 512
    conv_layers: 4
    checkpoint_activations: False  # recompute activations and save memory for extra compute
  mel_spec:
    target_sample_rate: 24000
    n_mel_channels: 100
    hop_length: 256
    win_length: 1024
    n_fft: 1024
    mel_spec_type: vocos  # 'vocos' or 'bigvgan'
  vocoder:
    is_local: True  # use local offline ckpt or not
    local_path: /mnt/matylda4/xluner01/F5-TTS/src/f5_tts/model/vocoder  # local vocoder path

ckpts:
  logger: wandb  # wandb | tensorboard | None
  save_per_updates: 50000  # save checkpoint per updates
  keep_last_n_checkpoints: -1  # -1 to keep all, 0 to not save intermediate, > 0 to keep last N checkpoints
  last_per_updates: 5000  # save last checkpoint per updates
  save_dir: ckpts/${model.name}_${model.mel_spec.mel_spec_type}_${model.tokenizer}_${datasets.name}